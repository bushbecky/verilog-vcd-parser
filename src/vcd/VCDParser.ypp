/*!
@file
@brief Contains the grammar definition for the parser.
*/

%skeleton "lalr1.cc"
%defines
%define parser_class_name {parser}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%file-prefix "VCDParser"
%name-prefix "VCDParser"

%code requires 
{
    #include <string>
    #include <map>

    #include "VCDTypes.hpp"
    #include "VCDFile.hpp"

    class VCDFileParser;
}

%param {VCDFileParser & driver}

%locations
%initial-action {
    @$.begin.filename = @$.end.filename = &driver.filepath;
}

%define parse.trace
%define parse.error verbose

%code{

#include "VCDFileParser.hpp"

}

%token                  TOK_BRACKET_O         
%token                  TOK_BRACKET_C         
%token                  TOK_COLON             
%token                  TOK_DOLLAR            
%token                  TOK_KW_END            
%token                  TOK_KW_COMMENT        
%token <std::string>    TOK_COMMENT_TEXT
%token                  TOK_KW_DATE           
%token <std::string>    TOK_DATE_TEXT
%token                  TOK_KW_ENDDEFINITIONS 
%token                  TOK_KW_SCOPE          
%token                  TOK_KW_TIMESCALE      
%token                  TOK_KW_UPSCOPE        
%token                  TOK_KW_VAR            
%token                  TOK_KW_VERSION        
%token <std::string>    TOK_VERSION_TEXT
%token                  TOK_KW_DUMPALL        
%token                  TOK_KW_DUMPOFF        
%token                  TOK_KW_DUMPON         
%token                  TOK_KW_DUMPVARS       
%token <VCDScopeType>   TOK_KW_BEGIN          
%token <VCDScopeType>   TOK_KW_FORK           
%token <VCDScopeType>   TOK_KW_FUNCTION       
%token <VCDScopeType>   TOK_KW_MODULE         
%token <VCDScopeType>   TOK_KW_TASK           
%token <VCDTimeRes>     TOK_TIME_NUMBER       
%token <VCDTimeUnit>    TOK_TIME_UNIT         
%token <VCDVarType>     TOK_VAR_TYPE          
%token                  TOK_HASH              
%token                  TOK_VALUE             
%token                  TOK_BIN_NUM           
%token                  TOK_BINARY_NUMBER     
%token                  TOK_REAL_NUM          
%token                  TOK_REAL_NUMBER       
%token <std::string>    TOK_IDENTIFIER        
%token                  TOK_DECIMAL_NUM       
%token                  END  0 "end of file"

%start input

%type <std::string>     comment_text
%type <std::string>     version_text 
%type <std::string>     date_text
%type <std::string>     reference
%type <VCDScopeType>    scope_type

%%

input :
    %empty
|   declaration_commands simulation_commands
|   simulation_commands
|   declaration_commands 
;

declaration_commands :
    declaration_command
|   declaration_commands declaration_command
;

simulation_commands:
    simulation_command
|   simulation_commands simulation_command 
;

declaration_command :
    TOK_KW_COMMENT  comment_text     TOK_KW_END
|   TOK_KW_DATE     date_text        TOK_KW_END {
    driver.fh -> date = $2;
}
|   TOK_KW_ENDDEFINITIONS TOK_KW_END
|   TOK_KW_SCOPE    scope_type TOK_IDENTIFIER TOK_KW_END
|   TOK_KW_TIMESCALE TOK_TIME_NUMBER TOK_TIME_UNIT TOK_KW_END {
    driver.fh -> time_resolution = $2;
    driver.fh -> time_units      = $3;
}
|   TOK_KW_UPSCOPE  TOK_KW_END
|   TOK_KW_VAR      TOK_VAR_TYPE TOK_DECIMAL_NUM TOK_IDENTIFIER reference 
    TOK_KW_END
|   TOK_KW_VERSION  version_text TOK_KW_END {
    driver.fh -> version = $2;
}
;

simulation_command :
    TOK_KW_DUMPALL  value_changes TOK_KW_END
|   TOK_KW_DUMPOFF  value_changes TOK_KW_END
|   TOK_KW_DUMPON   value_changes TOK_KW_END
|   TOK_KW_DUMPVARS value_changes TOK_KW_END
|   TOK_KW_COMMENT  value_changes TOK_KW_END
|   simulation_time
|   value_change
;

scope_type :
    TOK_KW_BEGIN
|   TOK_KW_FORK
|   TOK_KW_FUNCTION
|   TOK_KW_MODULE
|   TOK_KW_TASK
;

simulation_time : TOK_HASH TOK_DECIMAL_NUM

value_changes :
    value_change
|   value_changes value_change

value_change:
    scalar_value_change
|   vector_value_change

scalar_value_change:  TOK_VALUE TOK_IDENTIFIER

vector_value_change: 
    TOK_BIN_NUM     TOK_IDENTIFIER
|   TOK_REAL_NUM    TOK_IDENTIFIER

reference:
    TOK_IDENTIFIER {
    $$ = $1;
}
|   TOK_IDENTIFIER TOK_BRACKET_O TOK_DECIMAL_NUM TOK_BRACKET_C{
    $$ = $1;
    $$.append("[");
    $$.append("]");
}
|   TOK_IDENTIFIER TOK_BRACKET_O TOK_DECIMAL_NUM TOK_COLON TOK_DECIMAL_NUM
    TOK_BRACKET_C{
    $$ = $1;
    $$.append("[");
    $$.append(":");
    $$.append("]");
}

comment_text :
    %empty  {
    $$ = std::string("");
}
|   TOK_COMMENT_TEXT {
    $$ = std::string($1);
}
|   comment_text TOK_COMMENT_TEXT{
    $$ = $1;
    $$.append($2);
}

version_text :
    %empty{
    $$ = std::string("");
}
|   TOK_VERSION_TEXT {
    $$ = std::string($1);
}
|   version_text TOK_VERSION_TEXT {
    $$ = $1;
    $$.append($2);
}


date_text:
    %empty{
    $$ = std::string("");
}
|   TOK_DATE_TEXT {
    $$ = std::string($1);
}
|   date_text TOK_DATE_TEXT {
    $$ = $1;
    $$.append($2);
}

%%


void VCDParser::parser::error (
    const location_type& l,
    const std::string& m) {
    driver.error(l,m);
}
